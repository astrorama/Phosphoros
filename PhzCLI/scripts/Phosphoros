#!/usr/bin/env python

from subprocess import call
import sys
import os

class PhosphorosAction:
    def __init__(self, names, executable, help=''):
        self.names = names
        self.executable = executable
        self.help = help

action_list = [
    PhosphorosAction(['help', 'h', '-h', '--help'], 'help',
                     'Shows this help message'),
    PhosphorosAction(['GUI'], 'PhosphorosUI',
                     'Starts the Graphical User Interface'),
    PhosphorosAction(['compute_model_grid', 'CMG'], 'PhosphorosComputeModelGrid',
                     'Computes a grid containing the model photometries'),
    PhosphorosAction(['compute_photometric_corrections', 'CPC'], 'PhosphorosComputePhotometricCorrections',
                     'Calculates the Photometric Zero Point Corrections'),
    PhosphorosAction(['compute_redshifts', 'CR'], 'PhosphorosComputeRedshifts',
                     'Calculates the PHZ results for a given catalog'),
    PhosphorosAction(['display_filters', 'DF'], 'PhosphorosLsAux --type Filters',
                     'Browses the available filter transmission'),
    PhosphorosAction(['display_seds', 'DS'], 'PhosphorosLsAux --type Seds',
                     'Browses the available SED templates'),
    PhosphorosAction(['display_reddening_curves', 'DRC'], 'PhosphorosLsAux --type ReddeningCurves',
                     'Browses the available reddening curves'),
    PhosphorosAction(['display_model_grid', 'DMG'], 'PhosphorosDisplayModelGrid',
                     'Browses through a grid containing model photometries'),
    PhosphorosAction(['compute_model_sed', 'CMS'], 'PhosphorosComputeModelSed',
                     'Displays the reddened, redshifted SED data'),
    PhosphorosAction(['plot_specz_comparison', 'PSC'], 'PhosphorosPlotSpecZComparison',
                     'Shows plots comparing the PHZ result with SPECZ'),
    PhosphorosAction(['plot_posterior', 'PP'], 'PhosphorosPlotPosterior',
                     'Plots views of a multi-dimensional posterior')
]

def printHelp():
    print ''
    print 'Usage: Phosphoros <action> <action_parameters>'
    print ''
    print 'Available actions:'
    for action in action_list:
        message = action.names[0]
        for alter in action.names[1:]:
            message += ', ' + alter
        message += os.linesep + '    ' + action.help
        print message
    print ''
    exit()

if len(sys.argv) < 2:
    printHelp()

executable = [word for action in action_list if sys.argv[1] in action.names for word in action.executable.split()]
if not executable:
    print 'Unknown action: ' + sys.argv[1]
    print 'Try running "Phosphoros help"'
    exit(1)

if executable[0] == 'help':
    printHelp()

phosphoros_conf = os.getenv('PHOSPHOROS_ROOT', os.path.expanduser('~')+os.sep+'Phosphoros') + os.sep + 'conf'
if os.environ.get('ELEMENTS_CONF_PATH'):
    os.environ['ELEMENTS_CONF_PATH'] = phosphoros_conf + os.path.pathsep + os.environ['ELEMENTS_CONF_PATH']
else:
    os.environ['ELEMENTS_CONF_PATH'] = phosphoros_conf

cmd = executable + sys.argv[2:]
call(cmd)