/**
 * @file ScaleFactorFunctor.icpp
 * @date December 2, 2014
 * @author Nikolaos Apostolakos
 */

#ifndef SCALEFACTORFUNCTOR_ICPP
#define	SCALEFACTORFUNCTOR_ICPP

namespace Euclid {
namespace PhzLikelihood {

/**
  * @brief Function Call Operator
  * @details
  * Compute the Scale Factor of the source with respect to the model.
  *
  * @param source_begin
  * An iterator over the Filters of the source exposing an object having "flux" and "error" fields.

  * @param source_end
  * End iterator for the Filters of the source.
  *
  * @param model_begin
  * An iterator over the Filters of the model exposing an object containing the model "flux".
  *
  * @return
  * The computed Scale Factor as a double.
  */
template<typename SourceIter, typename ModelIter>
double ScaleFactorFunctor::operator ()(SourceIter source, SourceIter source_end,
                                       ModelIter model) const {
    double numerator {0.0};
    double denominator {0.0};
    for (; source!=source_end; ++source, ++model) {
      double error_square = (*source).error * (*source).error;
      numerator += ((*model).flux * (*source).flux) / error_square;
      denominator += ((*model).flux * (*model).flux) / error_square;
    }
    return numerator / denominator;
}

} // end of namespace PhzLikelihood
} // end of namespace Euclid

#endif	/* SCALEFACTORFUNCTOR_ICPP */

